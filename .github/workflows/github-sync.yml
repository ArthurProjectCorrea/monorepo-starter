name: GitHub Sync

on:
  workflow_dispatch:
  schedule:
    - cron: '0 4 * * 1'

jobs:
  setup-gh-secrets:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Configura secrets GH_PAT e NPM_TOKEN
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_REPO: ${{ github.repository }}
        run: |
          if [ -z "$GH_PAT" ] || [ -z "$NPM_TOKEN" ]; then
            echo "Secrets GH_PAT ou NPM_TOKEN não definidos."
            exit 1
          fi
          echo "Configurando secrets no repositório $GITHUB_REPO..."
          gh secret set GH_PAT --body "$GH_PAT" --repo "$GITHUB_REPO"
          gh secret set NPM_TOKEN --body "$NPM_TOKEN" --repo "$GITHUB_REPO"
          echo "Secrets configurados com sucesso!"

  protect-branches:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Protege branches principais
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
          GITHUB_REPO: ${{ github.repository }}
        run: |
          set -e
          echo "Protegendo branches main e dev em $GITHUB_REPO..."
          gh api -X PUT repos/$GITHUB_REPO/branches/main/protection \
            -F required_status_checks='{"strict":true,"contexts":[]}' \
            -F enforce_admins=true \
            -F required_pull_request_reviews='{"dismiss_stale_reviews":true,"require_code_owner_reviews":true,"required_approving_review_count":1}' \
            -F restrictions='null'
          gh api -X PUT repos/$GITHUB_REPO/branches/dev/protection \
            -F required_status_checks='{"strict":true,"contexts":[]}' \
            -F enforce_admins=true \
            -F required_pull_request_reviews='{"dismiss_stale_reviews":true,"require_code_owner_reviews":true}' \
            -F restrictions='null'
          echo "Branches protegidas com sucesso!"
  sync-labels:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Instala dependências para YAML
        run: npm install js-yaml axios
      - name: Sincroniza labels do GitHub
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          node -e "const fs=require('fs');const axios=require('axios');const yaml=require('js-yaml');const path=require('path');const LABELS_PATH=path.resolve('.github/labels.yml');const GITHUB_TOKEN=process.env.GH_PAT;const REPO=process.env.GITHUB_REPOSITORY;if(!GITHUB_TOKEN){console.error('GH_PAT não definido');process.exit(1);}if(!fs.existsSync(LABELS_PATH)){console.error('Arquivo de labels não encontrado:',LABELS_PATH);process.exit(1);}const labels=yaml.load(fs.readFileSync(LABELS_PATH,'utf8'));(async()=>{for(const label of labels){try{await axios({method:'post',url:`https://api.github.com/repos/${REPO}/labels`,headers:{Authorization:`token ${GITHUB_TOKEN}`,'Content-Type':'application/json',Accept:'application/vnd.github.v3+json'},data:{name:label.name,color:label.color.replace('#',''),description:label.description||''}});console.log(`Label criada/atualizada: ${label.name}`);}catch(err){if(err.response&&err.response.status===422){await axios({method:'patch',url:`https://api.github.com/repos/${REPO}/labels/${encodeURIComponent(label.name)}`,headers:{Authorization:`token ${GITHUB_TOKEN}`,'Content-Type':'application/json',Accept:'application/vnd.github.v3+json'},data:{new_name:label.name,color:label.color.replace('#',''),description:label.description||''}});console.log(`Label atualizada: ${label.name}`);}else{console.error(`Erro ao criar/atualizar label ${label.name}:`,err.message);}}}})();"
