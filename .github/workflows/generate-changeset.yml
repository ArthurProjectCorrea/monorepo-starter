on:
  pull_request:
    branches:
      - main

jobs:
  generate-changeset:
    runs-on: ubuntu-latest
    if: github.base_ref == 'main' && github.head_ref == 'dev'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Generate or update changeset (shell)
        shell: bash {0}
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          set -e
          # Define versioned projects
          declare -A PKGS
          PKGS["apps/api"]=api
          PKGS["apps/web"]=web
          PKGS["apps/docs"]=docs
          PKGS["packages/ui"]=ui
          PKGS["packages/config/eslint-config"]=eslint-config
          PKGS["packages/config/tailwind-config"]=tailwind-config
          PKGS["packages/config/typescript-config"]=typescript-config

          # Initialize impact map
          declare -A IMPACT

          # Analyze commits between main and dev
          git log --pretty=format:'%s' origin/main..HEAD > .changeset/_auto-commits.txt
          grep -E '^[a-z]+\([^)]+\):' .changeset/_auto-commits.txt | while read -r line; do
            tipo=$(echo "$line" | sed -E 's/^([a-z]+)\([^)]+\):.*/\1/')
            escopo=$(echo "$line" | sed -E 's/^[a-z]+\(([^)]+)\):.*/\1/')
            # Ignore non-versioned types
            case "$tipo" in
              chore|docs|style|test|ci|build|revert)
                continue
                ;;
            esac
            # Determine level
            if echo "$line" | grep -qE 'BREAKING CHANGE|!:'; then
              nivel=major
            elif [ "$tipo" = "feat" ]; then
              nivel=minor
            elif [ "$tipo" = "fix" ]; then
              nivel=patch
            else
              nivel=patch
            fi
            # If scope is a versioned project, mark it
            for path in "${!PKGS[@]}"; do
              if [ "$escopo" = "${PKGS[$path]}" ]; then
                atual="${IMPACT[$path]}"
                if [ "$nivel" = "major" ] || { [ "$nivel" = "minor" ] && [ "$atual" != "major" ]; }; then
                  IMPACT[$path]="$nivel"
                elif [ -z "$atual" ]; then
                  IMPACT[$path]="$nivel"
                fi
              fi
            done
          done

          # Analyze changed files
          git diff --name-only origin/main..HEAD > .changeset/_auto-files.txt
          while read -r file; do
            for path in "${!PKGS[@]}"; do
              if [[ "$file" == $path/* ]]; then
                if [[ -z "${IMPACT[$path]}" ]]; then
                  IMPACT[$path]="patch"
                fi
              fi
            done
          done < .changeset/_auto-files.txt

          CHG_FILE=".changeset/auto-impact-pr${PR_NUMBER}.md"

          # Build versions block
          VERSIONS_BLOCK="---\n"
          for path in "${!PKGS[@]}"; do
            if [[ -n "${IMPACT[$path]}" ]]; then
              VERSIONS_BLOCK+="\"$path\": ${IMPACT[$path]}\n"
            fi
          done
          VERSIONS_BLOCK+="---"

          if [[ -f "$CHG_FILE" ]]; then
            # Update only the versions block, preserve description
            awk -v vblock="$VERSIONS_BLOCK" '
              BEGIN{inblock=0; done=0}
              /^---$/ {
                if(inblock==0){print vblock; inblock=1; getline; while($0!~/^---$/ && !eof){getline}; getline; done=1}
              }
              {if(done) print $0}
            ' "$CHG_FILE" > "$CHG_FILE.tmp"
            mv "$CHG_FILE.tmp" "$CHG_FILE"
          else
            echo -e "$VERSIONS_BLOCK\n" > "$CHG_FILE"
            echo '[AUTOMATIC] Update this description to detail the main changes for each scope.' >> "$CHG_FILE"
            echo '' >> "$CHG_FILE"
          fi
          cat "$CHG_FILE"
      - name: Set up git user and remote for push
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/ArthurProjectCorrea/monorepo-starter.git
      - name: Set up git user and remote for push
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/ArthurProjectCorrea/monorepo-starter.git
      - name: Commit and push changeset manually
        run: |
          git add .changeset/auto-impact-pr${{ github.event.pull_request.number }}.md
          git commit -m "chore(monorepo): generate/update automatic changeset [skip ci]" --author="ArthurProjectCorrea <149885034+ArthurProjectCorrea@users.noreply.github.com>" || echo "Nada para commitar"
          git push origin HEAD:${{ github.head_ref || github.ref_name }}
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
